"""
3. Есть два списка:
tutors = [
    'Иван', 'Анастасия', 'Петр', 'Сергей',
    'Дмитрий', 'Борис', 'Елена'
]
klasses = [
    '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
]
Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>), например:
('Иван', '9А')
('Анастасия', '7В')
...
Количество генерируемых кортежей не должно быть больше длины списка tutors.
Если в списке klasses меньше элементов, чем в списке tutors,
необходимо вывести последние кортежи в виде: (<tutor>, None), например:

('Станислав', None)

Доказать, что вы создали именно генератор.
Проверить его работу вплоть до истощения.
Подумать, в каких ситуациях генератор даст эффект.
"""
import itertools

tutors = ['Иван', 'Анастасия', 'Петр']
classes = ['9А', '7В']

gen = ((i, j) for i, j in itertools.zip_longest(tutors, classes, fillvalue=None))

print(type(gen))
print(*gen)

# out: <class 'generator'>
# out: ('Иван', '9А') ('Анастасия', '7В') ('Петр', None)

"""
Ответ: если имеется ввиду где полезен генератор - везде где важна память и большие последовательности данных, 
т.к. генератор не хранит все значения а лишь выдает каждый раз новое исходя из логики генерации. 
"""